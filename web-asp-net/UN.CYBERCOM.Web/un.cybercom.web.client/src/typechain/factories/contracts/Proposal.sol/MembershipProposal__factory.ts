/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MembershipProposal,
  MembershipProposalInterface,
  MembershipManagement,
} from "../../../contracts/Proposal.sol/MembershipProposal";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "daoAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "votingAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "councilManagementAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "proposalStorageAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "membershipRemovalAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "membershipManagerAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "votingParametersManagerAddress",
            type: "address",
          },
        ],
        internalType: "struct MembershipManagement.ContractAddresses",
        name: "_contractAddresses",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_duration",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "id",
            type: "address",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
        ],
        internalType: "struct MembershipManagement.Nation",
        name: "_nation",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_groupId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AuthorizationError",
    type: "error",
  },
  {
    inputs: [],
    name: "VotingClosed",
    type: "error",
  },
  {
    inputs: [],
    name: "VotingNotStarted",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "enum MembershipManagement.ApprovalStatus",
        name: "newStatus",
        type: "uint8",
      },
    ],
    name: "StatusUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "member",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "vote",
        type: "bool",
      },
    ],
    name: "VoteCasted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "VotingCompleted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "VotingStarted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
      {
        internalType: "string",
        name: "url",
        type: "string",
      },
      {
        internalType: "bytes32",
        name: "docHash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "addDocument",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "duration",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDocuments",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "title",
            type: "string",
          },
          {
            internalType: "string",
            name: "url",
            type: "string",
          },
          {
            internalType: "bytes32",
            name: "dochash",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
          {
            internalType: "address",
            name: "signer",
            type: "address",
          },
          {
            internalType: "address",
            name: "docAddress",
            type: "address",
          },
        ],
        internalType: "struct MembershipManagement.Doc[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMembershipResponse",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "member",
            type: "address",
          },
          {
            components: [
              {
                internalType: "address",
                name: "id",
                type: "address",
              },
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
            ],
            internalType: "struct MembershipManagement.Nation",
            name: "newNation",
            type: "tuple",
          },
          {
            internalType: "bytes32",
            name: "council",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "groupId",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address",
                name: "member",
                type: "address",
              },
              {
                internalType: "bool",
                name: "voteCasted",
                type: "bool",
              },
              {
                internalType: "uint256",
                name: "timestamp",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "proposalId",
                type: "uint256",
              },
            ],
            internalType: "struct MembershipManagement.Vote[]",
            name: "votes",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "duration",
            type: "uint256",
          },
          {
            internalType: "enum MembershipManagement.ApprovalStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "isProcessing",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "votingStarted",
            type: "bool",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "address",
            name: "proposalAddress",
            type: "address",
          },
        ],
        internalType: "struct MembershipManagement.MembershipProposalResponse",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNation",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "id",
            type: "address",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
        ],
        internalType: "struct MembershipManagement.Nation",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getVotes",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "member",
            type: "address",
          },
          {
            internalType: "bool",
            name: "voteCasted",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "proposalId",
            type: "uint256",
          },
        ],
        internalType: "struct MembershipManagement.Vote[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "groupId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "id",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isProcessing",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proposalType",
    outputs: [
      {
        internalType: "enum MembershipManagement.ProposalTypes",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "randomNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "processing",
        type: "bool",
      },
    ],
    name: "setProcessing",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "random",
        type: "uint256",
      },
    ],
    name: "setRandomNumber",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "startVoting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "status",
    outputs: [
      {
        internalType: "enum MembershipManagement.ApprovalStatus",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "timestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum MembershipManagement.ApprovalStatus",
        name: "_status",
        type: "uint8",
      },
    ],
    name: "updateStatus",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "voteCasted",
        type: "bool",
      },
      {
        internalType: "address",
        name: "member",
        type: "address",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "votingStarted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526007805460ff19908116909155600980549091169055348015610025575f5ffd5b50604051612612380380612612833981016040819052610044916102d7565b600980546001600160a01b0388811661010002610100600160a81b0319909216919091179091558551600c80549183166001600160a01b03199283161790556020870151600d80549184169183169190911790556040870151600e80549184169183169190911790556060870151600f805491841691831691909117905560808701516010805491841691831691909117905560a08701516011805491841691831691909117905560c08701516012805491909316911617905560028490556003805460ff191690558585855f86603c81106101205780610123565b603c5b60045550506005805460ff19169055505042600655508151601380546001600160a01b0319166001600160a01b03909216919091178155602083015183919060149061016f908261045e565b505050601555506105189350505050565b80516001600160a01b0381168114610196575f5ffd5b919050565b634e487b7160e01b5f52604160045260245ffd5b604080519081016001600160401b03811182821017156101d1576101d161019b565b60405290565b60405160e081016001600160401b03811182821017156101d1576101d161019b565b604051601f8201601f191681016001600160401b03811182821017156102215761022161019b565b604052919050565b5f60408284031215610239575f5ffd5b6102416101af565b905061024c82610180565b815260208201516001600160401b03811115610266575f5ffd5b8201601f81018413610276575f5ffd5b80516001600160401b0381111561028f5761028f61019b565b6102a2601f8201601f19166020016101f9565b8181528560208385010111156102b6575f5ffd5b8160208401602083015e5f6020838301015280602085015250505092915050565b5f5f5f5f5f5f8688036101808112156102ee575f5ffd5b6102f788610180565b965060e0601f198201121561030a575f5ffd5b506103136101d7565b61031f60208901610180565b815261032d60408901610180565b602082015261033e60608901610180565b604082015261034f60808901610180565b606082015261036060a08901610180565b608082015261037160c08901610180565b60a082015261038260e08901610180565b60c08201526101008801516101208901516101408a015192975090955093506001600160401b038111156103b4575f5ffd5b6103c089828a01610229565b9250505f6101608801519050809150509295509295509295565b600181811c908216806103ee57607f821691505b60208210810361040c57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561045957805f5260205f20601f840160051c810160208510156104375750805b601f840160051c820191505b81811015610456575f8155600101610443565b50505b505050565b81516001600160401b038111156104775761047761019b565b61048b8161048584546103da565b84610412565b6020601f8211600181146104bd575f83156104a65750848201515b5f19600385901b1c1916600184901b178455610456565b5f84815260208120601f198516915b828110156104ec57878501518255602094850194600190920191016104cc565b508482101561050957868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b6120ed806105255f395ff3fe608060405234801561000f575f5ffd5b5060043610610127575f3560e01c806383d948b7116100a9578063b46a357f1161006e578063b46a357f14610272578063b80777ea14610287578063ccbac9f514610290578063d6bfea2814610299578063ef2d8700146102ac575f5ffd5b806383d948b7146102105780638da5cb5b1461021d578063a0f44c921461024d578063af640d0f14610256578063b377a8541461025f575f5ffd5b8063200d2ed2116100ef578063200d2ed2146101a157806331393ca6146101bb578063348edff7146101d0578063351d9f96146101e3578063633dfc70146101fd575f5ffd5b8063024848951461012b5780630b3af7f91461014d5780630dc96015146101625780630f792235146101775780630fb5a6b41461018a575b5f5ffd5b6007546101389060ff1681565b60405190151581526020015b60405180910390f35b61016061015b366004611088565b6102c1565b005b61016a6103af565b60405161014491906110e0565b61016061018536600461113c565b6104d2565b61019360045481565b604051908152602001610144565b6005546101ae9060ff1681565b604051610144919061117d565b6101c361050f565b604051610144919061122d565b6101606101de3660046113eb565b6106d8565b6003546101f09060ff1681565b6040516101449190611492565b61016061020b3660046114ac565b610779565b6009546101389060ff1681565b6009546102359061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610144565b61019360155481565b61019360025481565b61016061026d3660046114e1565b610953565b61027a610ad8565b60405161014491906114fc565b61019360065481565b61019360085481565b6101606102a736600461150e565b610b9d565b6102b4610bcc565b6040516101449190611525565b600c546001600160a01b031633148015906102e75750600d546001600160a01b03163314155b80156102fe57506011546001600160a01b03163314155b801561031557506010546001600160a01b03163314155b8015610331575060095461010090046001600160a01b03163314155b1561034e57604051621607ef60ea1b815260040160405180910390fd5b6005805482919060ff1916600183600481111561036d5761036d611155565b02179055506002547f2da7b23ca63c1eb969eee5fae4acb98186abecf5358b0354a82a5183ebca6b2a826040516103a4919061117d565b60405180910390a250565b600a546060905f906001600160401b038111156103ce576103ce61132d565b60405190808252806020026020018201604052801561041e57816020015b604080516080810182525f8082526020808301829052928201819052606082015282525f199092019101816103ec5790505b5090505f5b600a548110156104cc57600b5f600a8381548110610443576104436115f6565b5f918252602080832091909101546001600160a01b039081168452838201949094526040928301909120825160808101845281549485168152600160a01b90940460ff1615159184019190915260018101549183019190915260020154606082015282518390839081106104b9576104b96115f6565b6020908102919091010152600101610423565b50919050565b600d546001600160a01b031633146104fc57604051621607ef60ea1b815260040160405180910390fd5b6007805460ff1916911515919091179055565b610517610ff9565b600e5460408051610180810182526002548152601380546001600160a01b039081166020808501829052855180870187529182526014805493909716969495860194919392908401919061056a9061160a565b80601f01602080910402602001604051908101604052809291908181526020018280546105969061160a565b80156105e15780601f106105b8576101008083540402835291602001916105e1565b820191905f5260205f20905b8154815290600101906020018083116105c457829003601f168201915b5050505050815250508152602001826001600160a01b031663d3d1ff306015546040518263ffffffff1660e01b815260040161061f91815260200190565b602060405180830381865afa15801561063a573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061065e919061163c565b815260200160155481526020016106736103af565b815260048054602083015260055460409092019160ff169081111561069a5761069a611155565b815260075460ff908116151560208301526009549081161515604083015261010090046001600160a01b031660608201523060809091015292915050565b600c546001600160a01b031633148015906106fe5750600d546001600160a01b03163314155b801561071557506011546001600160a01b03163314155b801561072c57506010546001600160a01b03163314155b8015610748575060095461010090046001600160a01b03163314155b1561076557604051621607ef60ea1b815260040160405180910390fd5b6107728585858585610f01565b5050505050565b600c546001600160a01b0316331480159061079f5750600d546001600160a01b03163314155b80156107b657506011546001600160a01b03163314155b80156107cd57506010546001600160a01b03163314155b156107ea57604051621607ef60ea1b815260040160405180910390fd5b60095460ff1661080d57604051633fd0090160e11b815260040160405180910390fd5b6004544211156108305760405163335b65a560e11b815260040160405180910390fd5b600280546001600160a01b0383165f908152600b60205260409020909101541461089f57600a80546001810182555f919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80180546001600160a01b0319166001600160a01b0383161790555b604080516080810182526001600160a01b0383811680835285151560208085018281524286880190815260028054606089019081525f878152600b86528a90209851895494511515600160a01b026001600160a81b0319909516981697909717929092178755516001870155935194840194909455915484519182529281019190915290917f5aaa9aad7433112662b9e5ae23b96ed62b00035f413ab908c55607284e0804e2910160405180910390a25050565b600c546001600160a01b031633148015906109795750600d546001600160a01b03163314155b801561099057506011546001600160a01b03163314155b80156109a757506010546001600160a01b03163314155b156109c457604051621607ef60ea1b815260040160405180910390fd5b6009546001600160a01b038281166101009092041614610a2b5760405162461bcd60e51b815260206004820152601b60248201527f4f6e6c79206f776e65722063616e20737461727420766f74696e67000000000060448201526064015b60405180910390fd5b60095460ff1615610a775760405162461bcd60e51b8152602060048201526016602482015275159bdd1a5b99c8185b1c9958591e481cdd185c9d195960521b6044820152606401610a22565b6009805460ff19166001179055600480544291905f90610a98908490611667565b90915550506005805460ff191660011790556002546040517fcf33babc496bb6dc2942b39cb7b75766bbbadf7da50d176ff8c513e991140239905f90a250565b604080518082019091525f81526060602082015260408051808201909152601380546001600160a01b0316825260148054602084019190610b189061160a565b80601f0160208091040260200160405190810160405280929190818152602001828054610b449061160a565b8015610b8f5780601f10610b6657610100808354040283529160200191610b8f565b820191905f5260205f20905b815481529060010190602001808311610b7257829003601f168201915b505050505081525050905090565b600d546001600160a01b03163314610bc757604051621607ef60ea1b815260040160405180910390fd5b600855565b6001546060905f906001600160401b03811115610beb57610beb61132d565b604051908082528060200260200182016040528015610c6457816020015b610c516040518060c0016040528060608152602001606081526020015f8152602001606081526020015f6001600160a01b031681526020015f6001600160a01b031681525090565b815260200190600190039081610c095790505b5090505f5b81518110156104cc575f5f60018381548110610c8757610c876115f6565b905f5260205f2001604051610c9c919061167a565b908152604080519182900360200182205460c0830180835263129e754360e21b905290516001600160a01b03909116925081908390634a79d50c9060c4808501915f918187030181865afa158015610cf6573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610d1d9190810190611721565b8152602001826001600160a01b0316635600f04f6040518163ffffffff1660e01b81526004015f60405180830381865afa158015610d5d573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610d849190810190611721565b8152602001826001600160a01b03166310c83e536040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dc5573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610de9919061163c565b8152602001826001600160a01b03166351ff48476040518163ffffffff1660e01b81526004015f60405180830381865afa158015610e29573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610e509190810190611721565b8152602001826001600160a01b031663238ac9336040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e91573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610eb59190611765565b6001600160a01b03168152602001826001600160a01b0316815250838381518110610ee257610ee26115f6565b60200260200101819052508180610ef890611780565b92505050610c69565b60405183905f908190610f15908490611798565b908152604051908190036020019020546001600160a01b031614610f37575f5ffd5b5f30878486888a604051610f4a9061107b565b610f59969594939291906117ae565b604051809103905ff080158015610f72573d5f5f3e3d5ffd5b506001805480820182555f919091529091507fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601610fb0868261185b565b50805f83604051610fc19190611798565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b031990921691909117905550505050505050565b60408051610180810182525f808252602082015290810161102a604080518082019091525f81526060602082015290565b81526020015f81526020015f8152602001606081526020015f81526020015f600481111561105a5761105a611155565b81525f60208201819052604082018190526060820181905260809091015290565b6107a28061191683390190565b5f60208284031215611098575f5ffd5b8135600581106110a6575f5ffd5b9392505050565b80516001600160a01b03168252602080820151151590830152604080820151908301526060908101519082015260800190565b602080825282518282018190525f918401906040840190835b8181101561111d5761110c8385516110ad565b6020949094019392506001016110f9565b509095945050505050565b80358015158114611137575f5ffd5b919050565b5f6020828403121561114c575f5ffd5b6110a682611128565b634e487b7160e01b5f52602160045260245ffd5b6005811061117957611179611155565b9052565b6020810161118b8284611169565b92915050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b60018060a01b0381511682525f6020820151604060208501526111e56040850182611191565b949350505050565b5f8151808452602084019350602083015f5b82811015611223576112128683516110ad565b9550602091909101906001016111ff565b5093949350505050565b60208152815160208201525f602083015161125360408401826001600160a01b03169052565b506040830151610180606084015261126f6101a08401826111bf565b905060608401516080840152608084015160a084015260a0840151601f198483030160c08501526112a082826111ed565b91505060c084015160e084015260e08401516112c0610100850182611169565b5061010084015180151561012085015250610120840151801515610140850152506101408401516001600160a01b038116610160850152506101608401516001600160a01b038116610180850152509392505050565b6001600160a01b038116811461132a575f5ffd5b50565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f191681016001600160401b03811182821017156113695761136961132d565b604052919050565b5f6001600160401b038211156113895761138961132d565b50601f01601f191660200190565b5f82601f8301126113a6575f5ffd5b8135602083015f6113be6113b984611371565b611341565b90508281528583830111156113d1575f5ffd5b828260208301375f92810160200192909252509392505050565b5f5f5f5f5f60a086880312156113ff575f5ffd5b853561140a81611316565b945060208601356001600160401b03811115611424575f5ffd5b61143088828901611397565b94505060408601356001600160401b0381111561144b575f5ffd5b61145788828901611397565b9350506060860135915060808601356001600160401b03811115611479575f5ffd5b61148588828901611397565b9150509295509295909350565b60208101600483106114a6576114a6611155565b91905290565b5f5f604083850312156114bd575f5ffd5b6114c683611128565b915060208301356114d681611316565b809150509250929050565b5f602082840312156114f1575f5ffd5b81356110a681611316565b602081525f6110a660208301846111bf565b5f6020828403121561151e575f5ffd5b5035919050565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b828110156115ea57603f198786030184528151805160c0875261157160c0880182611191565b90506020820151878203602089015261158a8282611191565b91505060408201516040880152606082015187820360608901526115ae8282611191565b6080848101516001600160a01b03908116918b019190915260a0948501511693909801929092525050602093840193919091019060010161154b565b50929695505050505050565b634e487b7160e01b5f52603260045260245ffd5b600181811c9082168061161e57607f821691505b6020821081036104cc57634e487b7160e01b5f52602260045260245ffd5b5f6020828403121561164c575f5ffd5b5051919050565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561118b5761118b611653565b5f5f83546116878161160a565b60018216801561169e57600181146116b3576116e0565b60ff19831686528115158202860193506116e0565b865f5260205f205f5b838110156116d8578154888201526001909101906020016116bc565b505081860193505b509195945050505050565b5f6116f86113b984611371565b905082815283838301111561170b575f5ffd5b8282602083015e5f602084830101529392505050565b5f60208284031215611731575f5ffd5b81516001600160401b03811115611746575f5ffd5b8201601f81018413611756575f5ffd5b6111e5848251602084016116eb565b5f60208284031215611775575f5ffd5b81516110a681611316565b5f6001820161179157611791611653565b5060010190565b5f82518060208501845e5f920191825250919050565b6001600160a01b0387811682528616602082015260c0604082018190525f906117d990830187611191565b85606084015282810360808401526117f18186611191565b905082810360a08401526118058185611191565b9998505050505050505050565b601f82111561185657805f5260205f20601f840160051c810160208510156118375750805b601f840160051c820191505b81811015610772575f8155600101611843565b505050565b81516001600160401b038111156118745761187461132d565b61188881611882845461160a565b84611812565b6020601f8211600181146118ba575f83156118a35750848201515b5f19600385901b1c1916600184901b178455610772565b5f84815260208120601f198516915b828110156118e957878501518255602094850194600190920191016118c9565b508482101561190657868401515f19600387901b60f8161c191681555b50505050600190811b0190555056fe608060405234801561000f575f5ffd5b506040516107a23803806107a283398101604081905261002e91610326565b5f6100398282610476565b5060016100468382610476565b50600283905560036100588582610476565b50600480546001600160a01b038088166001600160a01b0319928316179092556005805492891692909116919091179055426006556002546040515f916100cd916020017f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b60408051601f19818403018152919052805160209091012090505f80806100f48489610156565b919450925090505f82600381111561010e5761010e610530565b14158061012957506004546001600160a01b03848116911614155b1561014757604051638baa579f60e01b815260040160405180910390fd5b50505050505050505050610544565b5f5f5f835160410361018d576020840151604085015160608601515f1a61017f8882858561019f565b955095509550505050610198565b505081515f91506002905b9250925092565b5f80806fa2a8918ca85bafe22016d0b997e4df60600160ff1b038411156101ce57505f91506003905082610253565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa15801561021f573d5f5f3e3d5ffd5b5050604051601f1901519150506001600160a01b03811661024a57505f925060019150829050610253565b92505f91508190505b9450945094915050565b80516001600160a01b0381168114610273575f5ffd5b919050565b634e487b7160e01b5f52604160045260245ffd5b5f806001600160401b038411156102a5576102a5610278565b50604051601f19601f85018116603f011681018181106001600160401b03821117156102d3576102d3610278565b6040528381529050808284018510156102ea575f5ffd5b8383602083015e5f60208583010152509392505050565b5f82601f830112610310575f5ffd5b61031f8383516020850161028c565b9392505050565b5f5f5f5f5f5f60c0878903121561033b575f5ffd5b6103448761025d565b95506103526020880161025d565b60408801519095506001600160401b0381111561036d575f5ffd5b8701601f8101891361037d575f5ffd5b61038c8982516020840161028c565b606089015160808a0151919650945090506001600160401b038111156103b0575f5ffd5b6103bc89828a01610301565b60a089015190935090506001600160401b038111156103d9575f5ffd5b6103e589828a01610301565b9150509295509295509295565b600181811c9082168061040657607f821691505b60208210810361042457634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561047157805f5260205f20601f840160051c8101602085101561044f5750805b601f840160051c820191505b8181101561046e575f815560010161045b565b50505b505050565b81516001600160401b0381111561048f5761048f610278565b6104a38161049d84546103f2565b8461042a565b6020601f8211600181146104d5575f83156104be5750848201515b5f19600385901b1c1916600184901b17845561046e565b5f84815260208120601f198516915b8281101561050457878501518255602094850194600190920191016104e4565b508482101561052157868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b5f52602160045260245ffd5b610251806105515f395ff3fe608060405234801561000f575f5ffd5b506004361061006b575f3560e01c806310c83e531461006f578063238ac9331461008b5780634a79d50c146100b657806351ff4847146100cb5780635600f04f146100d3578063b80777ea146100db578063ca973727146100e4575b5f5ffd5b61007860025481565b6040519081526020015b60405180910390f35b60045461009e906001600160a01b031681565b6040516001600160a01b039091168152602001610082565b6100be6100f7565b60405161008291906101ca565b6100be610182565b6100be61018f565b61007860065481565b60055461009e906001600160a01b031681565b5f8054610103906101e3565b80601f016020809104026020016040519081016040528092919081815260200182805461012f906101e3565b801561017a5780601f106101515761010080835404028352916020019161017a565b820191905f5260205f20905b81548152906001019060200180831161015d57829003601f168201915b505050505081565b60038054610103906101e3565b60018054610103906101e3565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f6101dc602083018461019c565b9392505050565b600181811c908216806101f757607f821691505b60208210810361021557634e487b7160e01b5f52602260045260245ffd5b5091905056fea2646970667358221220a3e9add27624d51009de2e60b86a504f5d5d5f75955e7f0b19b764bcaddf665a64736f6c634300081c0033a264697066735822122058acee336ab62212681b6b7d345842e711aa6d543f2cadfa49a2fd67a390eae064736f6c634300081c0033";

type MembershipProposalConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MembershipProposalConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MembershipProposal__factory extends ContractFactory {
  constructor(...args: MembershipProposalConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _owner: AddressLike,
    _contractAddresses: MembershipManagement.ContractAddressesStruct,
    _id: BigNumberish,
    _duration: BigNumberish,
    _nation: MembershipManagement.NationStruct,
    _groupId: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _owner,
      _contractAddresses,
      _id,
      _duration,
      _nation,
      _groupId,
      overrides || {}
    );
  }
  override deploy(
    _owner: AddressLike,
    _contractAddresses: MembershipManagement.ContractAddressesStruct,
    _id: BigNumberish,
    _duration: BigNumberish,
    _nation: MembershipManagement.NationStruct,
    _groupId: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _owner,
      _contractAddresses,
      _id,
      _duration,
      _nation,
      _groupId,
      overrides || {}
    ) as Promise<
      MembershipProposal & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MembershipProposal__factory {
    return super.connect(runner) as MembershipProposal__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MembershipProposalInterface {
    return new Interface(_abi) as MembershipProposalInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MembershipProposal {
    return new Contract(address, _abi, runner) as unknown as MembershipProposal;
  }
}
