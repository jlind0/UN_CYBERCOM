/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Document,
  DocumentInterface,
} from "../../../contracts/Document.sol/Document";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_owningContract",
        type: "address",
      },
      {
        internalType: "address",
        name: "_signer",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_signature",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "_dochash",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "_url",
        type: "string",
      },
      {
        internalType: "string",
        name: "_title",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AuthorizationError",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "dochash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owningContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "signature",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "signer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "timestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "title",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "url",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346104f557610a83803803809161001c82856104f9565b8339810160c0828203126104f5576100338261051c565b906100406020840161051c565b60408401519093906001600160401b0381116104f557810182601f820112156104f5578281602061007393519101610530565b91606082015191608081015160018060401b0381116104f55782610098918301610575565b60a08201519092906001600160401b0381116104f5576100b89201610575565b8051906001600160401b038211610373576100d35f54610592565b601f81116104a8575b50602090601f83116001146104455761010c92915f9183610387575b50508160011b915f199060031b1c19161790565b5f555b8051906001600160401b0382116103735761012b600154610592565b601f81116103f7575b50602090601f83116001146103925761016392915f91836103875750508160011b915f199060031b1c19161790565b6001555b6002558051926001600160401b03841161037357610186600354610592565b601f811161031a575b50602093601f81116001146102b557806101c29161024795965f916102aa575b508160011b915f199060031b1c19161790565b6003555b600480546001600160a01b039283166001600160a01b0319918216811790925560058054969093169516949094179055426006556002546040517f19457468657265756d205369676e6564204d6573736167653a0a33320000000060208201908152603c8083019390935291815261023f605c826104f9565b5190206105e0565b506004819392931015610296571591821592610282575b5050610273576040516103e5908161069e8239f35b638baa579f60e01b5f5260045ffd5b6001600160a01b0316141590505f8061025e565b634e487b7160e01b5f52602160045260245ffd5b90508401515f6101af565b601f19811660035f52855f20905f5b81811061030257509061024795968360019493106102ea575b5050811b016003556101c6565b8501515f1960f88460031b161c191690555f806102dd565b858801518355602097880197600190930192016102c4565b60035f52610363907fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f870160051c81019160208810610369575b601f0160051c01906105ca565b5f61018f565b9091508190610356565b634e487b7160e01b5f52604160045260245ffd5b015190505f806100f8565b90601f1983169160015f52815f20925f5b8181106103df57509084600195949392106103c7575b505050811b01600155610167565b01515f1960f88460031b161c191690555f80806103b9565b929360206001819287860151815501950193016103a3565b60015f5261043f907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6601f850160051c8101916020861061036957601f0160051c01906105ca565b5f610134565b90601f198316915f8052815f20925f5b8181106104905750908460019594939210610478575b505050811b015f5561010f565b01515f1960f88460031b161c191690555f808061046b565b92936020600181928786015181550195019301610455565b5f80526104ef907f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563601f850160051c8101916020861061036957601f0160051c01906105ca565b5f6100dc565b5f80fd5b601f909101601f19168101906001600160401b0382119082101761037357604052565b51906001600160a01b03821682036104f557565b9192916001600160401b0382116103735760405191610559601f8201601f1916602001846104f9565b8294818452818301116104f5578281602093845f96015e010152565b9080601f830112156104f557815161058f92602001610530565b90565b90600182811c921680156105c0575b60208310146105ac57565b634e487b7160e01b5f52602260045260245ffd5b91607f16916105a1565b8181106105d5575050565b5f81556001016105ca565b8151919060418303610610576106099250602082015190606060408401519301515f1a9061061a565b9192909190565b50505f9160029190565b91906fa2a8918ca85bafe22016d0b997e4df60600160ff1b038411610692579160209360809260ff5f9560405194855216868401526040830152606082015282805260015afa15610687575f516001600160a01b0381161561067d57905f905f90565b505f906001905f90565b6040513d5f823e3d90fd5b5050505f916003919056fe6080806040526004361015610012575f80fd5b5f3560e01c90816310c83e531461030357508063238ac933146102db5780634a79d50c1461023957806351ff4847146101945780635600f04f146100b2578063b80777ea146100955763ca97372714610069575f80fd5b34610091575f366003190112610091576005546040516001600160a01b039091168152602090f35b5f80fd5b34610091575f366003190112610091576020600654604051908152f35b34610091575f366003190112610091576040515f6001546100d28161031d565b80845290600181169081156101705750600114610112575b61010e836100fa81850382610355565b60405191829160208352602083019061038b565b0390f35b60015f9081527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6939250905b808210610156575090915081016020016100fa6100ea565b91926001816020925483858801015201910190929161013e565b60ff191660208086019190915291151560051b840190910191506100fa90506100ea565b34610091575f366003190112610091576040515f6003546101b48161031d565b808452906001811690811561017057506001146101db5761010e836100fa81850382610355565b60035f9081527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b939250905b80821061021f575090915081016020016100fa6100ea565b919260018160209254838588010152019101909291610207565b34610091575f366003190112610091576040515f5f546102588161031d565b8084529060018116908115610170575060011461027f5761010e836100fa81850382610355565b5f8080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563939250905b8082106102c1575090915081016020016100fa6100ea565b9192600181602092548385880101520191019092916102a9565b34610091575f366003190112610091576004546040516001600160a01b039091168152602090f35b34610091575f366003190112610091576020906002548152f35b90600182811c9216801561034b575b602083101461033757565b634e487b7160e01b5f52602260045260245ffd5b91607f169161032c565b90601f8019910116810190811067ffffffffffffffff82111761037757604052565b634e487b7160e01b5f52604160045260245ffd5b805180835260209291819084018484015e5f828201840152601f01601f191601019056fea2646970667358221220dfe6f4be4929943cb09eb424931c962075951966336366d5b615dc92f3671dea64736f6c634300081c0033";

type DocumentConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DocumentConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Document__factory extends ContractFactory {
  constructor(...args: DocumentConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _owningContract: AddressLike,
    _signer: AddressLike,
    _signature: BytesLike,
    _dochash: BytesLike,
    _url: string,
    _title: string,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _owningContract,
      _signer,
      _signature,
      _dochash,
      _url,
      _title,
      overrides || {}
    );
  }
  override deploy(
    _owningContract: AddressLike,
    _signer: AddressLike,
    _signature: BytesLike,
    _dochash: BytesLike,
    _url: string,
    _title: string,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _owningContract,
      _signer,
      _signature,
      _dochash,
      _url,
      _title,
      overrides || {}
    ) as Promise<
      Document & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Document__factory {
    return super.connect(runner) as Document__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DocumentInterface {
    return new Interface(_abi) as DocumentInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Document {
    return new Contract(address, _abi, runner) as unknown as Document;
  }
}
