/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace MembershipManagement {
  export type VotingParametersStruct = {
    randomizeByGroup: boolean;
    randomizeByMember: boolean;
    outputCountForGroup: BigNumberish;
    outputCountForMember: BigNumberish;
    voteDenominator: BigNumberish;
    voteNumerator: BigNumberish;
    sumDenominator: BigNumberish;
    sumNumerator: BigNumberish;
    avgVotes: boolean;
  };

  export type VotingParametersStructOutput = [
    randomizeByGroup: boolean,
    randomizeByMember: boolean,
    outputCountForGroup: bigint,
    outputCountForMember: bigint,
    voteDenominator: bigint,
    voteNumerator: bigint,
    sumDenominator: bigint,
    sumNumerator: bigint,
    avgVotes: boolean
  ] & {
    randomizeByGroup: boolean;
    randomizeByMember: boolean;
    outputCountForGroup: bigint;
    outputCountForMember: bigint;
    voteDenominator: bigint;
    voteNumerator: bigint;
    sumDenominator: bigint;
    sumNumerator: bigint;
    avgVotes: boolean;
  };

  export type VoteStruct = {
    member: AddressLike;
    voteCasted: boolean;
    timestamp: BigNumberish;
    proposalId: BigNumberish;
  };

  export type VoteStructOutput = [
    member: string,
    voteCasted: boolean,
    timestamp: bigint,
    proposalId: bigint
  ] & {
    member: string;
    voteCasted: boolean;
    timestamp: bigint;
    proposalId: bigint;
  };

  export type CouncilGroupVotesStruct = {
    groupId: BigNumberish;
    votes: MembershipManagement.VoteStruct[];
    score: BigNumberish;
  };

  export type CouncilGroupVotesStructOutput = [
    groupId: bigint,
    votes: MembershipManagement.VoteStructOutput[],
    score: bigint
  ] & {
    groupId: bigint;
    votes: MembershipManagement.VoteStructOutput[];
    score: bigint;
  };

  export type CouncilVotesStruct = {
    councilId: BytesLike;
    votingParameters: MembershipManagement.VotingParametersStruct;
    votes: MembershipManagement.CouncilGroupVotesStruct[];
    score: BigNumberish;
  };

  export type CouncilVotesStructOutput = [
    councilId: string,
    votingParameters: MembershipManagement.VotingParametersStructOutput,
    votes: MembershipManagement.CouncilGroupVotesStructOutput[],
    score: bigint
  ] & {
    councilId: string;
    votingParameters: MembershipManagement.VotingParametersStructOutput;
    votes: MembershipManagement.CouncilGroupVotesStructOutput[];
    score: bigint;
  };

  export type TallyResultStruct = {
    acceptedVotes: MembershipManagement.CouncilVotesStruct[];
    score: BigNumberish;
    status: BigNumberish;
    proposalId: BigNumberish;
  };

  export type TallyResultStructOutput = [
    acceptedVotes: MembershipManagement.CouncilVotesStructOutput[],
    score: bigint,
    status: bigint,
    proposalId: bigint
  ] & {
    acceptedVotes: MembershipManagement.CouncilVotesStructOutput[];
    score: bigint;
    status: bigint;
    proposalId: bigint;
  };
}

export interface VotingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addProposal"
      | "getVoteTally"
      | "prepareTally"
      | "rawFulfillRandomWords"
      | "tallyVotes"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addProposal",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteTally",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "prepareTally",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tallyVotes",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteTally",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareTally",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tallyVotes", data: BytesLike): Result;
}

export interface Voting extends BaseContract {
  connect(runner?: ContractRunner | null): Voting;
  waitForDeployment(): Promise<this>;

  interface: VotingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addProposal: TypedContractMethod<
    [proposalAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getVoteTally: TypedContractMethod<
    [proposalId: BigNumberish],
    [MembershipManagement.TallyResultStructOutput],
    "view"
  >;

  prepareTally: TypedContractMethod<
    [proposalId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  rawFulfillRandomWords: TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  tallyVotes: TypedContractMethod<
    [proposalId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addProposal"
  ): TypedContractMethod<[proposalAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getVoteTally"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [MembershipManagement.TallyResultStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "prepareTally"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "rawFulfillRandomWords"
  ): TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tallyVotes"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "nonpayable">;

  filters: {};
}
