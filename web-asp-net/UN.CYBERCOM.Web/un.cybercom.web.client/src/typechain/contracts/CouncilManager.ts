/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace MembershipManagement {
  export type VotingParametersStruct = {
    randomizeByGroup: boolean;
    randomizeByMember: boolean;
    outputCountForGroup: BigNumberish;
    outputCountForMember: BigNumberish;
    voteDenominator: BigNumberish;
    voteNumerator: BigNumberish;
    sumDenominator: BigNumberish;
    sumNumerator: BigNumberish;
    avgVotes: boolean;
  };

  export type VotingParametersStructOutput = [
    randomizeByGroup: boolean,
    randomizeByMember: boolean,
    outputCountForGroup: bigint,
    outputCountForMember: bigint,
    voteDenominator: bigint,
    voteNumerator: bigint,
    sumDenominator: bigint,
    sumNumerator: bigint,
    avgVotes: boolean
  ] & {
    randomizeByGroup: boolean;
    randomizeByMember: boolean;
    outputCountForGroup: bigint;
    outputCountForMember: bigint;
    voteDenominator: bigint;
    voteNumerator: bigint;
    sumDenominator: bigint;
    sumNumerator: bigint;
    avgVotes: boolean;
  };

  export type MotionRulesStruct = {
    numberOfSeconds: BigNumberish;
    requiresMajority: boolean;
    onlyWithinOwnGroup: boolean;
    disabled: boolean;
    councilsThatCanMotion: BytesLike[];
  };

  export type MotionRulesStructOutput = [
    numberOfSeconds: bigint,
    requiresMajority: boolean,
    onlyWithinOwnGroup: boolean,
    disabled: boolean,
    councilsThatCanMotion: string[]
  ] & {
    numberOfSeconds: bigint;
    requiresMajority: boolean;
    onlyWithinOwnGroup: boolean;
    disabled: boolean;
    councilsThatCanMotion: string[];
  };

  export type NationStruct = { id: AddressLike; name: string };

  export type NationStructOutput = [id: string, name: string] & {
    id: string;
    name: string;
  };

  export type CouncilGroupStruct = {
    id: BigNumberish;
    name: string;
    members: MembershipManagement.NationStruct[];
  };

  export type CouncilGroupStructOutput = [
    id: bigint,
    name: string,
    members: MembershipManagement.NationStructOutput[]
  ] & {
    id: bigint;
    name: string;
    members: MembershipManagement.NationStructOutput[];
  };

  export type CouncilStruct = {
    name: string;
    role: BytesLike;
    votingParameters: MembershipManagement.VotingParametersStruct;
    motionRules: MembershipManagement.MotionRulesStruct;
    groups: MembershipManagement.CouncilGroupStruct[];
  };

  export type CouncilStructOutput = [
    name: string,
    role: string,
    votingParameters: MembershipManagement.VotingParametersStructOutput,
    motionRules: MembershipManagement.MotionRulesStructOutput,
    groups: MembershipManagement.CouncilGroupStructOutput[]
  ] & {
    name: string;
    role: string;
    votingParameters: MembershipManagement.VotingParametersStructOutput;
    motionRules: MembershipManagement.MotionRulesStructOutput;
    groups: MembershipManagement.CouncilGroupStructOutput[];
  };

  export type VoteStruct = {
    member: AddressLike;
    voteCasted: boolean;
    timestamp: BigNumberish;
    proposalId: BigNumberish;
  };

  export type VoteStructOutput = [
    member: string,
    voteCasted: boolean,
    timestamp: bigint,
    proposalId: bigint
  ] & {
    member: string;
    voteCasted: boolean;
    timestamp: bigint;
    proposalId: bigint;
  };

  export type CouncilGroupVotesStruct = {
    groupId: BigNumberish;
    votes: MembershipManagement.VoteStruct[];
    score: BigNumberish;
  };

  export type CouncilGroupVotesStructOutput = [
    groupId: bigint,
    votes: MembershipManagement.VoteStructOutput[],
    score: bigint
  ] & {
    groupId: bigint;
    votes: MembershipManagement.VoteStructOutput[];
    score: bigint;
  };

  export type CouncilVotesStruct = {
    councilId: BytesLike;
    votingParameters: MembershipManagement.VotingParametersStruct;
    votes: MembershipManagement.CouncilGroupVotesStruct[];
    score: BigNumberish;
  };

  export type CouncilVotesStructOutput = [
    councilId: string,
    votingParameters: MembershipManagement.VotingParametersStructOutput,
    votes: MembershipManagement.CouncilGroupVotesStructOutput[],
    score: bigint
  ] & {
    councilId: string;
    votingParameters: MembershipManagement.VotingParametersStructOutput;
    votes: MembershipManagement.CouncilGroupVotesStructOutput[];
    score: bigint;
  };
}

export interface CouncilManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BROKER_ROLE"
      | "CENTRAL_ROLE"
      | "EMERGING_ROLE"
      | "GENERAL_ROLE"
      | "INDUSTRY_ROLE"
      | "LESSER_ROLE"
      | "POWER_ROLE"
      | "acceptNewMember"
      | "doesCouncilExist"
      | "doesCouncilGroupExist"
      | "doesNationExist"
      | "getAllRoles"
      | "getCouncil"
      | "getCouncilForGroupId"
      | "getCouncilForNation"
      | "getCouncilGroupForNation"
      | "getCouncilRoleForGroup"
      | "getCouncilVotes"
      | "getCouncils"
      | "getNation"
      | "getNationCount"
      | "removeNation"
      | "totalNations"
      | "updateVotingParameters"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BROKER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CENTRAL_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EMERGING_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GENERAL_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INDUSTRY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LESSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POWER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptNewMember",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "doesCouncilExist",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "doesCouncilGroupExist",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "doesNationExist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllRoles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCouncil",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCouncilForGroupId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCouncilForNation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCouncilGroupForNation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCouncilRoleForGroup",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCouncilVotes",
    values: [MembershipManagement.VoteStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getCouncils",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNationCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeNation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalNations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateVotingParameters",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BROKER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CENTRAL_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EMERGING_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GENERAL_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INDUSTRY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LESSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "POWER_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptNewMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doesCouncilExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doesCouncilGroupExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doesNationExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCouncil", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCouncilForGroupId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCouncilForNation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCouncilGroupForNation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCouncilRoleForGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCouncilVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCouncils",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNation", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeNation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalNations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVotingParameters",
    data: BytesLike
  ): Result;
}

export interface CouncilManager extends BaseContract {
  connect(runner?: ContractRunner | null): CouncilManager;
  waitForDeployment(): Promise<this>;

  interface: CouncilManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BROKER_ROLE: TypedContractMethod<[], [string], "view">;

  CENTRAL_ROLE: TypedContractMethod<[], [string], "view">;

  EMERGING_ROLE: TypedContractMethod<[], [string], "view">;

  GENERAL_ROLE: TypedContractMethod<[], [string], "view">;

  INDUSTRY_ROLE: TypedContractMethod<[], [string], "view">;

  LESSER_ROLE: TypedContractMethod<[], [string], "view">;

  POWER_ROLE: TypedContractMethod<[], [string], "view">;

  acceptNewMember: TypedContractMethod<
    [proposalAddress: AddressLike],
    [[string, string] & { memberId: string; role: string }],
    "nonpayable"
  >;

  doesCouncilExist: TypedContractMethod<[role: BytesLike], [boolean], "view">;

  doesCouncilGroupExist: TypedContractMethod<
    [groupId: BigNumberish],
    [boolean],
    "view"
  >;

  doesNationExist: TypedContractMethod<
    [memberId: AddressLike],
    [boolean],
    "view"
  >;

  getAllRoles: TypedContractMethod<[], [string[]], "view">;

  getCouncil: TypedContractMethod<
    [role: BytesLike],
    [MembershipManagement.CouncilStructOutput],
    "view"
  >;

  getCouncilForGroupId: TypedContractMethod<
    [groupId: BigNumberish],
    [MembershipManagement.CouncilStructOutput],
    "view"
  >;

  getCouncilForNation: TypedContractMethod<
    [nationId: AddressLike],
    [MembershipManagement.CouncilStructOutput],
    "view"
  >;

  getCouncilGroupForNation: TypedContractMethod<
    [nationId: AddressLike],
    [MembershipManagement.CouncilGroupStructOutput],
    "view"
  >;

  getCouncilRoleForGroup: TypedContractMethod<
    [groupId: BigNumberish],
    [string],
    "view"
  >;

  getCouncilVotes: TypedContractMethod<
    [vs: MembershipManagement.VoteStruct[]],
    [MembershipManagement.CouncilVotesStructOutput[]],
    "view"
  >;

  getCouncils: TypedContractMethod<
    [],
    [MembershipManagement.CouncilStructOutput[]],
    "view"
  >;

  getNation: TypedContractMethod<
    [id: AddressLike],
    [MembershipManagement.NationStructOutput],
    "view"
  >;

  getNationCount: TypedContractMethod<[], [bigint], "view">;

  removeNation: TypedContractMethod<
    [nationId: AddressLike],
    [string],
    "nonpayable"
  >;

  totalNations: TypedContractMethod<[], [bigint], "view">;

  updateVotingParameters: TypedContractMethod<
    [proposalAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BROKER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CENTRAL_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "EMERGING_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "GENERAL_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "INDUSTRY_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "LESSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "POWER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptNewMember"
  ): TypedContractMethod<
    [proposalAddress: AddressLike],
    [[string, string] & { memberId: string; role: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "doesCouncilExist"
  ): TypedContractMethod<[role: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "doesCouncilGroupExist"
  ): TypedContractMethod<[groupId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "doesNationExist"
  ): TypedContractMethod<[memberId: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getAllRoles"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCouncil"
  ): TypedContractMethod<
    [role: BytesLike],
    [MembershipManagement.CouncilStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCouncilForGroupId"
  ): TypedContractMethod<
    [groupId: BigNumberish],
    [MembershipManagement.CouncilStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCouncilForNation"
  ): TypedContractMethod<
    [nationId: AddressLike],
    [MembershipManagement.CouncilStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCouncilGroupForNation"
  ): TypedContractMethod<
    [nationId: AddressLike],
    [MembershipManagement.CouncilGroupStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCouncilRoleForGroup"
  ): TypedContractMethod<[groupId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getCouncilVotes"
  ): TypedContractMethod<
    [vs: MembershipManagement.VoteStruct[]],
    [MembershipManagement.CouncilVotesStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCouncils"
  ): TypedContractMethod<
    [],
    [MembershipManagement.CouncilStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNation"
  ): TypedContractMethod<
    [id: AddressLike],
    [MembershipManagement.NationStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNationCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeNation"
  ): TypedContractMethod<[nationId: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "totalNations"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateVotingParameters"
  ): TypedContractMethod<[proposalAddress: AddressLike], [void], "nonpayable">;

  filters: {};
}
