/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace MembershipManagement {
  export type VoteStruct = {
    member: AddressLike;
    voteCasted: boolean;
    timestamp: BigNumberish;
    proposalId: BigNumberish;
  };

  export type VoteStructOutput = [
    member: string,
    voteCasted: boolean,
    timestamp: bigint,
    proposalId: bigint
  ] & {
    member: string;
    voteCasted: boolean;
    timestamp: bigint;
    proposalId: bigint;
  };

  export type ProposalPackageResponseStruct = {
    id: BigNumberish;
    proposals: BigNumberish[];
    votes: MembershipManagement.VoteStruct[];
    duration: BigNumberish;
    status: BigNumberish;
    isProcessing: boolean;
    votingStarted: boolean;
    owner: AddressLike;
    proposalAddress: AddressLike;
  };

  export type ProposalPackageResponseStructOutput = [
    id: bigint,
    proposals: bigint[],
    votes: MembershipManagement.VoteStructOutput[],
    duration: bigint,
    status: bigint,
    isProcessing: boolean,
    votingStarted: boolean,
    owner: string,
    proposalAddress: string
  ] & {
    id: bigint;
    proposals: bigint[];
    votes: MembershipManagement.VoteStructOutput[];
    duration: bigint;
    status: bigint;
    isProcessing: boolean;
    votingStarted: boolean;
    owner: string;
    proposalAddress: string;
  };

  export type ProposalPackageRequestStruct = {
    duration: BigNumberish;
    owner: AddressLike;
  };

  export type ProposalPackageRequestStructOutput = [
    duration: bigint,
    owner: string
  ] & { duration: bigint; owner: string };
}

export interface PackageProposalManagerInterface extends Interface {
  getFunction(
    nameOrSignature: "getRequests" | "submitProposal"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "getRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitProposal",
    values: [MembershipManagement.ProposalPackageRequestStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "getRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProposal",
    data: BytesLike
  ): Result;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    proposalAddress: AddressLike
  ];
  export type OutputTuple = [proposalId: bigint, proposalAddress: string];
  export interface OutputObject {
    proposalId: bigint;
    proposalAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PackageProposalManager extends BaseContract {
  connect(runner?: ContractRunner | null): PackageProposalManager;
  waitForDeployment(): Promise<this>;

  interface: PackageProposalManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getRequests: TypedContractMethod<
    [status: BigNumberish],
    [MembershipManagement.ProposalPackageResponseStructOutput[]],
    "view"
  >;

  submitProposal: TypedContractMethod<
    [request: MembershipManagement.ProposalPackageRequestStruct],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getRequests"
  ): TypedContractMethod<
    [status: BigNumberish],
    [MembershipManagement.ProposalPackageResponseStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "submitProposal"
  ): TypedContractMethod<
    [request: MembershipManagement.ProposalPackageRequestStruct],
    [string],
    "nonpayable"
  >;

  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;

  filters: {
    "ProposalCreated(uint256,address)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
  };
}
