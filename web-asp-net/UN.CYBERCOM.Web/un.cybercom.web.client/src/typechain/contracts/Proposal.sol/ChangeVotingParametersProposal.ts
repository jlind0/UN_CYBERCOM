/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace MembershipManagement {
  export type ContractAddressesStruct = {
    daoAddress: AddressLike;
    votingAddress: AddressLike;
    councilManagementAddress: AddressLike;
    proposalStorageAddress: AddressLike;
    membershipRemovalAddress: AddressLike;
    membershipManagerAddress: AddressLike;
    votingParametersManagerAddress: AddressLike;
  };

  export type ContractAddressesStructOutput = [
    daoAddress: string,
    votingAddress: string,
    councilManagementAddress: string,
    proposalStorageAddress: string,
    membershipRemovalAddress: string,
    membershipManagerAddress: string,
    votingParametersManagerAddress: string
  ] & {
    daoAddress: string;
    votingAddress: string;
    councilManagementAddress: string;
    proposalStorageAddress: string;
    membershipRemovalAddress: string;
    membershipManagerAddress: string;
    votingParametersManagerAddress: string;
  };

  export type VotingParametersStruct = {
    randomizeByGroup: boolean;
    randomizeByMember: boolean;
    outputCountForGroup: BigNumberish;
    outputCountForMember: BigNumberish;
    voteDenominator: BigNumberish;
    voteNumerator: BigNumberish;
    sumDenominator: BigNumberish;
    sumNumerator: BigNumberish;
    avgVotes: boolean;
  };

  export type VotingParametersStructOutput = [
    randomizeByGroup: boolean,
    randomizeByMember: boolean,
    outputCountForGroup: bigint,
    outputCountForMember: bigint,
    voteDenominator: bigint,
    voteNumerator: bigint,
    sumDenominator: bigint,
    sumNumerator: bigint,
    avgVotes: boolean
  ] & {
    randomizeByGroup: boolean;
    randomizeByMember: boolean;
    outputCountForGroup: bigint;
    outputCountForMember: bigint;
    voteDenominator: bigint;
    voteNumerator: bigint;
    sumDenominator: bigint;
    sumNumerator: bigint;
    avgVotes: boolean;
  };

  export type ChangeVotingParametersRoleStruct = {
    council: BytesLike;
    parameters: MembershipManagement.VotingParametersStruct;
  };

  export type ChangeVotingParametersRoleStructOutput = [
    council: string,
    parameters: MembershipManagement.VotingParametersStructOutput
  ] & {
    council: string;
    parameters: MembershipManagement.VotingParametersStructOutput;
  };

  export type VoteStruct = {
    member: AddressLike;
    voteCasted: boolean;
    timestamp: BigNumberish;
    proposalId: BigNumberish;
  };

  export type VoteStructOutput = [
    member: string,
    voteCasted: boolean,
    timestamp: bigint,
    proposalId: bigint
  ] & {
    member: string;
    voteCasted: boolean;
    timestamp: bigint;
    proposalId: bigint;
  };

  export type ChangeVotingParametersResponseStruct = {
    id: BigNumberish;
    parameters: MembershipManagement.ChangeVotingParametersRoleStruct[];
    votes: MembershipManagement.VoteStruct[];
    duration: BigNumberish;
    status: BigNumberish;
    isProcessing: boolean;
    votingStarted: boolean;
    owner: AddressLike;
    proposalAddress: AddressLike;
  };

  export type ChangeVotingParametersResponseStructOutput = [
    id: bigint,
    parameters: MembershipManagement.ChangeVotingParametersRoleStructOutput[],
    votes: MembershipManagement.VoteStructOutput[],
    duration: bigint,
    status: bigint,
    isProcessing: boolean,
    votingStarted: boolean,
    owner: string,
    proposalAddress: string
  ] & {
    id: bigint;
    parameters: MembershipManagement.ChangeVotingParametersRoleStructOutput[];
    votes: MembershipManagement.VoteStructOutput[];
    duration: bigint;
    status: bigint;
    isProcessing: boolean;
    votingStarted: boolean;
    owner: string;
    proposalAddress: string;
  };

  export type DocStruct = {
    title: string;
    url: string;
    dochash: BytesLike;
    signature: BytesLike;
    signer: AddressLike;
    docAddress: AddressLike;
  };

  export type DocStructOutput = [
    title: string,
    url: string,
    dochash: string,
    signature: string,
    signer: string,
    docAddress: string
  ] & {
    title: string;
    url: string;
    dochash: string;
    signature: string;
    signer: string;
    docAddress: string;
  };
}

export interface ChangeVotingParametersProposalInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addDocument"
      | "duration"
      | "getChangeResponse"
      | "getDocuments"
      | "getThreshold"
      | "getVotes"
      | "id"
      | "isProcessing"
      | "owner"
      | "proposalType"
      | "randomNumber"
      | "setProcessing"
      | "setRandomNumber"
      | "startVoting"
      | "status"
      | "timestamp"
      | "updateStatus"
      | "vote"
      | "votingStarted"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "StatusUpdated"
      | "VoteCasted"
      | "VotingCompleted"
      | "VotingStarted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addDocument",
    values: [AddressLike, string, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "duration", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getChangeResponse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDocuments",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getVotes", values?: undefined): string;
  encodeFunctionData(functionFragment: "id", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isProcessing",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "randomNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setProcessing",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRandomNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startVoting",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(functionFragment: "timestamp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [boolean, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "votingStarted",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "duration", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChangeResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDocuments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "id", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isProcessing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProcessing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRandomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timestamp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingStarted",
    data: BytesLike
  ): Result;
}

export namespace StatusUpdatedEvent {
  export type InputTuple = [proposalId: BigNumberish, newStatus: BigNumberish];
  export type OutputTuple = [proposalId: bigint, newStatus: bigint];
  export interface OutputObject {
    proposalId: bigint;
    newStatus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    member: AddressLike,
    vote: boolean
  ];
  export type OutputTuple = [proposalId: bigint, member: string, vote: boolean];
  export interface OutputObject {
    proposalId: bigint;
    member: string;
    vote: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingCompletedEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingStartedEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChangeVotingParametersProposal extends BaseContract {
  connect(runner?: ContractRunner | null): ChangeVotingParametersProposal;
  waitForDeployment(): Promise<this>;

  interface: ChangeVotingParametersProposalInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addDocument: TypedContractMethod<
    [
      signer: AddressLike,
      title: string,
      url: string,
      docHash: BytesLike,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  duration: TypedContractMethod<[], [bigint], "view">;

  getChangeResponse: TypedContractMethod<
    [],
    [MembershipManagement.ChangeVotingParametersResponseStructOutput],
    "view"
  >;

  getDocuments: TypedContractMethod<
    [],
    [MembershipManagement.DocStructOutput[]],
    "view"
  >;

  getThreshold: TypedContractMethod<[], [bigint], "view">;

  getVotes: TypedContractMethod<
    [],
    [MembershipManagement.VoteStructOutput[]],
    "view"
  >;

  id: TypedContractMethod<[], [bigint], "view">;

  isProcessing: TypedContractMethod<[], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  proposalType: TypedContractMethod<[], [bigint], "view">;

  randomNumber: TypedContractMethod<[], [bigint], "view">;

  setProcessing: TypedContractMethod<
    [processing: boolean],
    [void],
    "nonpayable"
  >;

  setRandomNumber: TypedContractMethod<
    [random: BigNumberish],
    [void],
    "nonpayable"
  >;

  startVoting: TypedContractMethod<[sender: AddressLike], [void], "nonpayable">;

  status: TypedContractMethod<[], [bigint], "view">;

  timestamp: TypedContractMethod<[], [bigint], "view">;

  updateStatus: TypedContractMethod<
    [_status: BigNumberish],
    [void],
    "nonpayable"
  >;

  vote: TypedContractMethod<
    [voteCasted: boolean, member: AddressLike],
    [void],
    "nonpayable"
  >;

  votingStarted: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addDocument"
  ): TypedContractMethod<
    [
      signer: AddressLike,
      title: string,
      url: string,
      docHash: BytesLike,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "duration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getChangeResponse"
  ): TypedContractMethod<
    [],
    [MembershipManagement.ChangeVotingParametersResponseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDocuments"
  ): TypedContractMethod<[], [MembershipManagement.DocStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVotes"
  ): TypedContractMethod<[], [MembershipManagement.VoteStructOutput[]], "view">;
  getFunction(nameOrSignature: "id"): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isProcessing"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposalType"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "randomNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setProcessing"
  ): TypedContractMethod<[processing: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRandomNumber"
  ): TypedContractMethod<[random: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startVoting"
  ): TypedContractMethod<[sender: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "status"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "timestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateStatus"
  ): TypedContractMethod<[_status: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [voteCasted: boolean, member: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "votingStarted"
  ): TypedContractMethod<[], [boolean], "view">;

  getEvent(
    key: "StatusUpdated"
  ): TypedContractEvent<
    StatusUpdatedEvent.InputTuple,
    StatusUpdatedEvent.OutputTuple,
    StatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCasted"
  ): TypedContractEvent<
    VoteCastedEvent.InputTuple,
    VoteCastedEvent.OutputTuple,
    VoteCastedEvent.OutputObject
  >;
  getEvent(
    key: "VotingCompleted"
  ): TypedContractEvent<
    VotingCompletedEvent.InputTuple,
    VotingCompletedEvent.OutputTuple,
    VotingCompletedEvent.OutputObject
  >;
  getEvent(
    key: "VotingStarted"
  ): TypedContractEvent<
    VotingStartedEvent.InputTuple,
    VotingStartedEvent.OutputTuple,
    VotingStartedEvent.OutputObject
  >;

  filters: {
    "StatusUpdated(uint256,uint8)": TypedContractEvent<
      StatusUpdatedEvent.InputTuple,
      StatusUpdatedEvent.OutputTuple,
      StatusUpdatedEvent.OutputObject
    >;
    StatusUpdated: TypedContractEvent<
      StatusUpdatedEvent.InputTuple,
      StatusUpdatedEvent.OutputTuple,
      StatusUpdatedEvent.OutputObject
    >;

    "VoteCasted(uint256,address,bool)": TypedContractEvent<
      VoteCastedEvent.InputTuple,
      VoteCastedEvent.OutputTuple,
      VoteCastedEvent.OutputObject
    >;
    VoteCasted: TypedContractEvent<
      VoteCastedEvent.InputTuple,
      VoteCastedEvent.OutputTuple,
      VoteCastedEvent.OutputObject
    >;

    "VotingCompleted(uint256)": TypedContractEvent<
      VotingCompletedEvent.InputTuple,
      VotingCompletedEvent.OutputTuple,
      VotingCompletedEvent.OutputObject
    >;
    VotingCompleted: TypedContractEvent<
      VotingCompletedEvent.InputTuple,
      VotingCompletedEvent.OutputTuple,
      VotingCompletedEvent.OutputObject
    >;

    "VotingStarted(uint256)": TypedContractEvent<
      VotingStartedEvent.InputTuple,
      VotingStartedEvent.OutputTuple,
      VotingStartedEvent.OutputObject
    >;
    VotingStarted: TypedContractEvent<
      VotingStartedEvent.InputTuple,
      VotingStartedEvent.OutputTuple,
      VotingStartedEvent.OutputObject
    >;
  };
}
