/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ProposalStorageManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addChangeParametersProposal"
      | "addMembershipProposal"
      | "addMembershipRemovalProposal"
      | "getChangeParametersProposalAddresses"
      | "getMembershipProposal"
      | "getMembershipProposalAddresses"
      | "getMembershipRemovalProposal"
      | "getMembershipRemovalProposalAddresses"
      | "getNextProposalId"
      | "getProposal"
      | "proposalCount"
      | "proposals"
      | "setMembershipProposal"
      | "setMembershipRemovalProposal"
      | "setProposal"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addChangeParametersProposal",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addMembershipProposal",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addMembershipRemovalProposal",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getChangeParametersProposalAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMembershipProposal",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMembershipProposalAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMembershipRemovalProposal",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMembershipRemovalProposalAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMembershipProposal",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMembershipRemovalProposal",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposal",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addChangeParametersProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMembershipProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMembershipRemovalProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChangeParametersProposalAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMembershipProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMembershipProposalAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMembershipRemovalProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMembershipRemovalProposalAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMembershipProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMembershipRemovalProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposal",
    data: BytesLike
  ): Result;
}

export interface ProposalStorageManager extends BaseContract {
  connect(runner?: ContractRunner | null): ProposalStorageManager;
  waitForDeployment(): Promise<this>;

  interface: ProposalStorageManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addChangeParametersProposal: TypedContractMethod<
    [key: AddressLike],
    [void],
    "nonpayable"
  >;

  addMembershipProposal: TypedContractMethod<
    [key: AddressLike],
    [void],
    "nonpayable"
  >;

  addMembershipRemovalProposal: TypedContractMethod<
    [key: AddressLike],
    [void],
    "nonpayable"
  >;

  getChangeParametersProposalAddresses: TypedContractMethod<
    [],
    [string[]],
    "view"
  >;

  getMembershipProposal: TypedContractMethod<
    [key: AddressLike],
    [string],
    "view"
  >;

  getMembershipProposalAddresses: TypedContractMethod<[], [string[]], "view">;

  getMembershipRemovalProposal: TypedContractMethod<
    [key: AddressLike],
    [string],
    "view"
  >;

  getMembershipRemovalProposalAddresses: TypedContractMethod<
    [],
    [string[]],
    "view"
  >;

  getNextProposalId: TypedContractMethod<[], [bigint], "nonpayable">;

  getProposal: TypedContractMethod<[key: BigNumberish], [string], "view">;

  proposalCount: TypedContractMethod<[], [bigint], "view">;

  proposals: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  setMembershipProposal: TypedContractMethod<
    [key: AddressLike, value: AddressLike],
    [void],
    "nonpayable"
  >;

  setMembershipRemovalProposal: TypedContractMethod<
    [key: AddressLike, value: AddressLike],
    [void],
    "nonpayable"
  >;

  setProposal: TypedContractMethod<
    [key: BigNumberish, value: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addChangeParametersProposal"
  ): TypedContractMethod<[key: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addMembershipProposal"
  ): TypedContractMethod<[key: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addMembershipRemovalProposal"
  ): TypedContractMethod<[key: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getChangeParametersProposalAddresses"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getMembershipProposal"
  ): TypedContractMethod<[key: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getMembershipProposalAddresses"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getMembershipRemovalProposal"
  ): TypedContractMethod<[key: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getMembershipRemovalProposalAddresses"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getNextProposalId"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "getProposal"
  ): TypedContractMethod<[key: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "proposalCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "setMembershipProposal"
  ): TypedContractMethod<
    [key: AddressLike, value: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMembershipRemovalProposal"
  ): TypedContractMethod<
    [key: AddressLike, value: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProposal"
  ): TypedContractMethod<
    [key: BigNumberish, value: AddressLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
