/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface UtilsInterface extends Interface {
  getFunction(nameOrSignature: "getDigitBlock"): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MemberAccepted"
      | "MemberKept"
      | "MemberRejected"
      | "MemberRemoved"
      | "ProposalCreated"
      | "TallyPrepared"
      | "VoteCast"
      | "VoteStarted"
      | "VotingCompleted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getDigitBlock",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getDigitBlock",
    data: BytesLike
  ): Result;
}

export namespace MemberAcceptedEvent {
  export type InputTuple = [memberId: AddressLike];
  export type OutputTuple = [memberId: string];
  export interface OutputObject {
    memberId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemberKeptEvent {
  export type InputTuple = [memberId: AddressLike];
  export type OutputTuple = [memberId: string];
  export interface OutputObject {
    memberId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemberRejectedEvent {
  export type InputTuple = [memberId: AddressLike];
  export type OutputTuple = [memberId: string];
  export interface OutputObject {
    memberId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemberRemovedEvent {
  export type InputTuple = [memberId: AddressLike];
  export type OutputTuple = [memberId: string];
  export interface OutputObject {
    memberId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    proposalAddress: AddressLike
  ];
  export type OutputTuple = [proposalId: bigint, proposalAddress: string];
  export interface OutputObject {
    proposalId: bigint;
    proposalAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TallyPreparedEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    voter: AddressLike,
    vote: boolean
  ];
  export type OutputTuple = [proposalId: bigint, voter: string, vote: boolean];
  export interface OutputObject {
    proposalId: bigint;
    voter: string;
    vote: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteStartedEvent {
  export type InputTuple = [proposalId: BigNumberish, startedBy: AddressLike];
  export type OutputTuple = [proposalId: bigint, startedBy: string];
  export interface OutputObject {
    proposalId: bigint;
    startedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingCompletedEvent {
  export type InputTuple = [proposalId: BigNumberish, status: BigNumberish];
  export type OutputTuple = [proposalId: bigint, status: bigint];
  export interface OutputObject {
    proposalId: bigint;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Utils extends BaseContract {
  connect(runner?: ContractRunner | null): Utils;
  waitForDeployment(): Promise<this>;

  interface: UtilsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getDigitBlock: TypedContractMethod<
    [number: BigNumberish, blockIndex: BigNumberish, blockLength: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getDigitBlock"
  ): TypedContractMethod<
    [number: BigNumberish, blockIndex: BigNumberish, blockLength: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "MemberAccepted"
  ): TypedContractEvent<
    MemberAcceptedEvent.InputTuple,
    MemberAcceptedEvent.OutputTuple,
    MemberAcceptedEvent.OutputObject
  >;
  getEvent(
    key: "MemberKept"
  ): TypedContractEvent<
    MemberKeptEvent.InputTuple,
    MemberKeptEvent.OutputTuple,
    MemberKeptEvent.OutputObject
  >;
  getEvent(
    key: "MemberRejected"
  ): TypedContractEvent<
    MemberRejectedEvent.InputTuple,
    MemberRejectedEvent.OutputTuple,
    MemberRejectedEvent.OutputObject
  >;
  getEvent(
    key: "MemberRemoved"
  ): TypedContractEvent<
    MemberRemovedEvent.InputTuple,
    MemberRemovedEvent.OutputTuple,
    MemberRemovedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TallyPrepared"
  ): TypedContractEvent<
    TallyPreparedEvent.InputTuple,
    TallyPreparedEvent.OutputTuple,
    TallyPreparedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VoteStarted"
  ): TypedContractEvent<
    VoteStartedEvent.InputTuple,
    VoteStartedEvent.OutputTuple,
    VoteStartedEvent.OutputObject
  >;
  getEvent(
    key: "VotingCompleted"
  ): TypedContractEvent<
    VotingCompletedEvent.InputTuple,
    VotingCompletedEvent.OutputTuple,
    VotingCompletedEvent.OutputObject
  >;

  filters: {
    "MemberAccepted(address)": TypedContractEvent<
      MemberAcceptedEvent.InputTuple,
      MemberAcceptedEvent.OutputTuple,
      MemberAcceptedEvent.OutputObject
    >;
    MemberAccepted: TypedContractEvent<
      MemberAcceptedEvent.InputTuple,
      MemberAcceptedEvent.OutputTuple,
      MemberAcceptedEvent.OutputObject
    >;

    "MemberKept(address)": TypedContractEvent<
      MemberKeptEvent.InputTuple,
      MemberKeptEvent.OutputTuple,
      MemberKeptEvent.OutputObject
    >;
    MemberKept: TypedContractEvent<
      MemberKeptEvent.InputTuple,
      MemberKeptEvent.OutputTuple,
      MemberKeptEvent.OutputObject
    >;

    "MemberRejected(address)": TypedContractEvent<
      MemberRejectedEvent.InputTuple,
      MemberRejectedEvent.OutputTuple,
      MemberRejectedEvent.OutputObject
    >;
    MemberRejected: TypedContractEvent<
      MemberRejectedEvent.InputTuple,
      MemberRejectedEvent.OutputTuple,
      MemberRejectedEvent.OutputObject
    >;

    "MemberRemoved(address)": TypedContractEvent<
      MemberRemovedEvent.InputTuple,
      MemberRemovedEvent.OutputTuple,
      MemberRemovedEvent.OutputObject
    >;
    MemberRemoved: TypedContractEvent<
      MemberRemovedEvent.InputTuple,
      MemberRemovedEvent.OutputTuple,
      MemberRemovedEvent.OutputObject
    >;

    "ProposalCreated(uint256,address)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "TallyPrepared(uint256)": TypedContractEvent<
      TallyPreparedEvent.InputTuple,
      TallyPreparedEvent.OutputTuple,
      TallyPreparedEvent.OutputObject
    >;
    TallyPrepared: TypedContractEvent<
      TallyPreparedEvent.InputTuple,
      TallyPreparedEvent.OutputTuple,
      TallyPreparedEvent.OutputObject
    >;

    "VoteCast(uint256,address,bool)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;

    "VoteStarted(uint256,address)": TypedContractEvent<
      VoteStartedEvent.InputTuple,
      VoteStartedEvent.OutputTuple,
      VoteStartedEvent.OutputObject
    >;
    VoteStarted: TypedContractEvent<
      VoteStartedEvent.InputTuple,
      VoteStartedEvent.OutputTuple,
      VoteStartedEvent.OutputObject
    >;

    "VotingCompleted(uint256,uint8)": TypedContractEvent<
      VotingCompletedEvent.InputTuple,
      VotingCompletedEvent.OutputTuple,
      VotingCompletedEvent.OutputObject
    >;
    VotingCompleted: TypedContractEvent<
      VotingCompletedEvent.InputTuple,
      VotingCompletedEvent.OutputTuple,
      VotingCompletedEvent.OutputObject
    >;
  };
}
