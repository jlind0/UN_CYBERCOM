/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace MembershipManagement {
  export type DocStruct = {
    title: string;
    url: string;
    dochash: BytesLike;
    signature: BytesLike;
    signer: AddressLike;
    docAddress: AddressLike;
  };

  export type DocStructOutput = [
    title: string,
    url: string,
    dochash: string,
    signature: string,
    signer: string,
    docAddress: string
  ] & {
    title: string;
    url: string;
    dochash: string;
    signature: string;
    signer: string;
    docAddress: string;
  };
}

export interface DocumentsHolderInterface extends Interface {
  getFunction(
    nameOrSignature: "addDocument" | "getDocuments"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addDocument",
    values: [AddressLike, string, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDocuments",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDocuments",
    data: BytesLike
  ): Result;
}

export interface DocumentsHolder extends BaseContract {
  connect(runner?: ContractRunner | null): DocumentsHolder;
  waitForDeployment(): Promise<this>;

  interface: DocumentsHolderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addDocument: TypedContractMethod<
    [
      signer: AddressLike,
      title: string,
      url: string,
      docHash: BytesLike,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getDocuments: TypedContractMethod<
    [],
    [MembershipManagement.DocStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addDocument"
  ): TypedContractMethod<
    [
      signer: AddressLike,
      title: string,
      url: string,
      docHash: BytesLike,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getDocuments"
  ): TypedContractMethod<[], [MembershipManagement.DocStructOutput[]], "view">;

  filters: {};
}
